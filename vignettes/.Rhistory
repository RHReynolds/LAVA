library(lava)
### Navigate to the vignette directory
setwd("~/Programs/R/lava/vignettes/data")    # adapt as necessary
setwd("~/Programs/R/lava/vignettes/data")    # adapt as necessary
setwd("~/Programs/R/lava/vignettes/data")    # adapt as necessary
library(lava)
### Navigate to the vignette directory
setwd("~/Programs/R/lava/vignettes/data")    # adapt as necessary
### Read in summary statistics and related info
input = process.input(input.info.file="input.info.txt",           # input info file
sample.overlap.file="sample.overlap.txt",   # sample overlap file (can be set to NULL if there is no overlap)
ref.prefix="g1000_test",                    # reference genotype data prefix
phenos=c("depression","neuro","bmi"))       # subset of phenotypes listed in the input info file that we want to process
dir()
devtools::install("~/Programs/R/lava")		# adapt as necessary
### Read in summarystatistics and related info
input = process.input(input.info.file="data/input.info.txt",           # input info file
sample.overlap.file="data/sample.overlap.txt",   # sample overlap file (can be set to NULL if there is no overlap)
ref.prefix="data/g1000_test",                    # reference genotype data prefix
phenos=c("depression","neuro","bmi"))       # subset of phenotypes listed in the input info file that we want to process
### Read in summarystatistics and related info
input = process.input(input.info.file="data/input.info.txt",           # input info file
sample.overlap.file="data/sample.overlap.txt",   # sample overlap file (can be set to NULL if there is no overlap)
ref.prefix="data/g1000_test",                    # reference genotype data prefix
phenos=c("depression","neuro","bmi"))       # subset of phenotypes listed in the input info file that we want to process
# inspect the processed input data
ls(input)				      # this is actually an environment; hence ls() rather than str()
# inspect the processed input data
ls(input)				      # this is actually an environment; hence ls() rather than str()
ls(input$sum.stats)   # processed summary statistics
input$info            # processed input info file, with additional variables N, prop_cases, binary computed by process.input()
input$sample.overlap  # sample overlap file
head(input$ref$bim)   # bim file from reference data
# read more about this function
?process.input()
### Create a locus object for the first locus to prepare it for analysis
locus = process.locus(loci[1,], input)
### Create a locus object for the first locus to prepare it for analysis
locus = process.locus(loci[1,], input)
### Read in locus info file
loci = read.loci("data/test.loci")
head(loci)                          # inspect the locus file
?read.loci()                        # read more about the function and possible data formats
### Create a locus object for the first locus to prepare it for analysis
locus = process.locus(loci[1,], input)
# for all phenotypes in the locus
run.univ(locus)
# or just a subset
run.univ(locus, phenos=c("depression","bmi"))
# for all phenotypes in the locus
run.univ(locus)
# or just a subset
run.univ(locus, phenos=c("depression","bmi"))
locus = process.locus(loci[3,], input)
locus = process.locus(loci[3,], input)
run.univ(locus)
# with the default p-value threshold of .05
run.univ.bivar(locus)
# or with a custom p-value threshold
run.univ.bivar(locus, univ.thresh = 1e-8)
?run.univ.bivar()
run.univ.bivar(locus. univ.thresh=1e-8, return.unanalysed=T)
run.univ.bivar(locus. univ.thresh=1e-8, return.unanalysed=T)
run.univ.bivar(locus, univ.thresh=1e-8, return.unanalysed=T)
input = process.input(input.info.file="data/input.info.txt",
sample.overlap.file="data/sample.overlap.txt",
ref.prefix="data/g1000_test",
phenos=c("asthma","hypothyroidism","rheuma","diabetes"))
input = process.input(input.info.file="data/input.info.txt",
sample.overlap.file="data/sample.overlap.txt",
ref.prefix="data/g1000_test",
phenos=c("asthma","hypothyroidism","rheuma","diabetes"))
input = process.input(input.info.file="data/input.info.txt",
sample.overlap.file="data/sample.overlap.txt",
ref.prefix="data/g1000_test",
phenos=c("asthma","hypothyroidism","rheuma","diabetes"))
str(loci)
locus = process.locus(loci[5,], input)
locus = process.locus(loci[5,], input)
#run.mul
locus$id
run.multireg(locus)
loci[6,]
loci[7,]
loci[10,]
loci[8,]
run.multireg(locus)
locus = process.locus(loci[8,], input)
run.univ.bivar(locus, phenos=c("asthma","rheuma","diabetes","hypothyroidism"))
?run.univ.bivar()
run.univ.bivar(locus, phenos=c("asthma","rheuma","diabetes","hypothyroidism"))
run.multireg(locus)
run.multireg(locus,phenos=c("asthma","rheuma","diabetes","hypothyroidism"))
run.multireg(locus,phenos=c("asthma","rheuma","hypothyroidism"))
?cap()
devtools::document()
.rs.restartR(); rm(list=ls())
devtools::install("~/Documents/GitHub/lava/")
rmarkdown::render('tutorial.Rmd', output_format = 'all')		# create multiple formats
dir()
cap(cond[[j]][[k]][[p]], lim=c(0,1))
# function for capping values
cap = function(values, lim = c(-1,1)) {
for (i in 1:length(values)) {
if (is.na(values[i])) next
if (values[i] > max(lim)) {
values[i] = max(lim)
} else if (values[i] < min(lim)) {
values[i] = min(lim)
}
}
return(values)
}
cap(c(NA,-2,3,.4), lim=c(0,1))
locus$id
if (is.null(phenos)) { phenos = locus$phenos } else { if (any(! phenos %in% locus$phenos)) { stop(paste("Invalid phenotype ID provided:", paste(phenos[! phenos %in% locus$phenos]))) } } ## 20-09-24: added error if faulty phenotype IDs are provided
phenos=locus$phenos
bivar = list(); params = c("gamma.std","r2"); ci.params = c("rho.lower","rho.upper","r2.lower","r2.upper")
bivar = data.frame(matrix(NA, Px, length(params)+7)); colnames(bivar) = c("phen1","phen2",params,ci.params,"p"); bivar$phen2 = phenos[P]
P = length(phenos); Px = P-1; Y = phenos[P]
bivar = list(); params = c("gamma.std","r2"); ci.params = c("rho.lower","rho.upper","r2.lower","r2.upper")
bivar = data.frame(matrix(NA, Px, length(params)+7)); colnames(bivar) = c("phen1","phen2",params,ci.params,"p"); bivar$phen2 = phenos[P]
CIs=T; p.values=T
bivar$phen1[i] = phenos[i]
for (i in 1:Px) {
bivar$phen1[i] = phenos[i]
# estimate params
mom = estimate.moments(delta=locus$delta[,c(phenos[i],Y)], sigma=locus$sigma[c(phenos[i],Y),c(phenos[i],Y)], K=locus$K)
for (p in params) { bivar[[p]][i] = signif(mom[[p]], 6) } # store params
# confidence intervals
if (CIs) {
ci = ci.bivariate(K = locus$K, omega = mom$omega, sigma = locus$sigma[c(phenos[i],Y),c(phenos[i],Y)])
bivar$rho.lower[i] = ci$ci.rho.low; bivar$rho.upper[i] = ci$ci.rho.high
bivar$r2.lower[i] = ci$ci.r2.low; bivar$r2.upper[i] = ci$ci.r2.high
}
# p-values
if (p.values) { bivar$p[i] = signif(integral.p(bivariate.integral, K=locus$K, omega=mom$omega, sigma=locus$sigma[c(phenos[i],Y),c(phenos[i],Y)], adap.thresh=adap.thresh), 6) }	## 20/09/18: updated integral.p()
}
bivar
phenos
bivar
bivar$r2=c(-1.2,.4,3)
bivar$rho=c(-1.2,.4,3)
for (p in params) { bivar[[p]] = cap(bivar[[p]], lim=c(ifelse(p=="r2", 0, -1), 1)) }
bivar
p
ifelse(p=="r2", 0, -1)
ifelse(p=="r2", 0, -1)
params
params=c("rho","r2")
for (p in params) { bivar[[p]] = cap(bivar[[p]], lim=c(ifelse(p=="r2", 0, -1), 1)) }
bivar
input = process.input(input.info.file="data/input.info.txt",
sample.overlap.file="data/sample.overlap.txt",
ref.prefix="data/g1000_test",
phenos=c("asthma","rheuma","diabetes","hypothyroidism"))
loci[,1]
### Read in locus info file
loci = read.loci("data/test.loci")
loci[,1]
